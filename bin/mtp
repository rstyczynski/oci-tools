#!/bin/bash

_mtp_VERSION=0.2

# history
# 0.1 initial with telnet
# 0.2 replaced telnet with python

target_ip=$1
target_port=$2
interval=$3
count=$4
target_banner=$5

#
# default values
#
: ${interval:=5}
: ${tests_in_row:=$((60 / $interval))}}
test $tests_in_row -eq 0 && tests_in_row=1
: ${count:=$((900 / $interval))}

#
# mtp functions
#
function banner() {
  echo "My tcp ping version $_mtp_VERSION. Utility to test accessbilty of tcp services."
}
function usage(){
  cat << EOF
Usage: mtp ip port [interval] [count] [expect]

By default test runs for 15 minutes with 5 second delays.

Hack: set tests_in_row to control test batch size.

Use cases
=========
1. connect to service w/o banner
mtp dns.google.com 53

2. connect to ssh service
mtp github.com 22

3. connect to ssh service and check banner
mtp github.com 22 5 720 SSH

4. connect to ftp service
mtp 193.46.186.29 21

5. connect to ftp service and check banner
mtp 193.46.186.29 21 5 720 FTP

6. connect to service w/o banner. Keep 5 tests in row
export tests_in_row=5
mtp dns.google.com 53

EOF
}

if [ -z "$target_ip" ] || [ -z "$target_port" ]; then
  banner
  echo
  echo "Error: ip and port must be provided. Cannot continue."
  echo
  usage
  exit 9
fi

function required() {
  if [ -z "$(which $1 2>/dev/null)" ]; then
    echo "$1" >~/tmp/required.lst
  fi
}

function cleanup() {
  test -f ~/tmp/mtp_socket.out && rm -f ~/tmp/mtp_socket.out
  test -f ~/tmp/required.lst   && rm -f ~/tmp/required.lst
}

function forced_quit() {
  cleanup
  echo "Test halted."
  exit 130
}

trap forced_quit SIGINT
trap forced_quit SIGTERM

#
# standard library
#
function sayatcell() {

    nl=yes
    if [ $1 == '-n' ]; then
        nl=no
        shift
    fi

    fr=no
    if [ $1 == '-f' ]; then
        fr=yes
        shift
    fi

    what=$1
    shift
    size=$1
    shift

    back='____________________________________________________________________________________________________________'
    back='                                                                                                            '
    dots='............................................................................................................'

    what_lth=$(echo -n $what | wc -c)

    if [ $what_lth -lt $size ]; then
        pre=$(echo "($size - $what_lth)/2" | bc)
        post=$(echo "$size - $what_lth - $pre" | bc)

        if [ $pre -gt 0 ]; then
            echo -n "$back" | cut -b1-$pre | tr -d '\n'
        fi

        echo -n "$what"

        if [ $post -gt 0 ]; then
            echo -n "$back" | cut -b1-$post | tr -d '\n'
        fi

    elif [ $what_lth -gt $size ]; then
        echo -n "$what" | cut -b1-$(($size - 2)) | tr -d '\n'
        echo -n "$dots" | cut -b1-2 | tr -d '\n'
    elif [ $what_lth -eq $size ]; then
        echo -n "$what"
    fi

    if [ $nl == yes ]; then
        if [ $fr == yes ]; then
            echo '|'
        else
            echo
        fi
    elif [ $fr == yes ]; then
        echo -n '|'
    fi
}

#
# main logic
#

banner
echo

if [ ! -z "$target_banner" ]; then
  echo "Test case: connecting $count times with interval $interval seconds to $target_ip:$target_port with expected banner: $target_banner"
  echo
  target_expect=$target_banner
else
  echo "Test case: connecting $count times with interval $interval seconds to $target_ip:$target_port to just estabish a tcp socket."
  echo
  target_expect=Connected
fi

cleanup
required python2 

if [ -f ~/tmp/required.lst ]; then
  echo "Error. Cannot run w/o required tools: $(cat ~/tmp/required.lst)"
  exit 8
fi

mkdir -p ~/tmp

sayatcell -n -f " time" 30
sayatcell -n -f "source" 25
sayatcell -n -f "target" 25
sayatcell -n -f "interval" 10
sayatcell -n -f "test no." 10
if [ $tests_in_row -gt 7 ]; then
  sayatcell -f "state" $tests_in_row
else
  sayatcell -f "state" 7
fi

cnt=0
while [ $cnt -lt $count ]; do

  if [ $(($cnt % $tests_in_row)) -eq 0 ]; then
    test $cnt -gt 0 && echo '|'
    sayatcell -n -f "$(date)" 30
    sayatcell -n -f "$(hostname)" 25
    sayatcell -n -f "$target_ip:$target_port" 25
    sayatcell -n -f "$interval" 10
    sayatcell -n -f "$(($cnt + 1))" 10
  fi
  cnt=$(($cnt + 1))


  timeout $interval python2 > ~/tmp/mtp_socket.out  2>&1 << EOF
import socket  
import sys  

s=socket.socket()  
# timoeut tested at os level - to make script easier
#s.settimeout($interval)
s.connect(("$target_ip",$target_port))
print "Connected to $target_ip"
banner = s.recv(1024)  
print banner  
EOF
  if [ $? -eq 124 ]; then
    sleep_time=0
  else
    sleep_time=$interval
  fi

  grep "$target_expect" ~/tmp/mtp_socket.out >/dev/null
  if [ $? -eq 0 ]; then
    echo -n '+'
  else
    echo -n '!'
  fi

  sleep $sleep_time
done

echo '|'

cleanup

echo
echo "Test completed."
